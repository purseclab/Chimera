# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import p4testgen_pb2 as p4testgen__pb2


class P4FuzzGuideStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Hello = channel.unary_unary(
        '/p4testgen.P4FuzzGuide/Hello',
        request_serializer=p4testgen__pb2.HealthCheckRequest.SerializeToString,
        response_deserializer=p4testgen__pb2.HealthCheckResponse.FromString,
        )
    self.GetP4Name = channel.unary_unary(
        '/p4testgen.P4FuzzGuide/GetP4Name',
        request_serializer=p4testgen__pb2.P4NameRequest.SerializeToString,
        response_deserializer=p4testgen__pb2.P4NameReply.FromString,
        )
    self.GetP4Coverage = channel.unary_unary(
        '/p4testgen.P4FuzzGuide/GetP4Coverage',
        request_serializer=p4testgen__pb2.P4CoverageRequest.SerializeToString,
        response_deserializer=p4testgen__pb2.P4CoverageReply.FromString,
        )
    self.RecordP4Testgen = channel.unary_unary(
        '/p4testgen.P4FuzzGuide/RecordP4Testgen',
        request_serializer=p4testgen__pb2.P4CoverageRequest.SerializeToString,
        response_deserializer=p4testgen__pb2.P4CoverageReply.FromString,
        )
    self.GetP4Statement = channel.unary_unary(
        '/p4testgen.P4FuzzGuide/GetP4Statement',
        request_serializer=p4testgen__pb2.P4StatementRequest.SerializeToString,
        response_deserializer=p4testgen__pb2.P4StatementReply.FromString,
        )
    self.GenRuleP4Testgen = channel.unary_unary(
        '/p4testgen.P4FuzzGuide/GenRuleP4Testgen',
        request_serializer=p4testgen__pb2.P4CoverageRequest.SerializeToString,
        response_deserializer=p4testgen__pb2.P4CoverageReply.FromString,
        )


class P4FuzzGuideServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Hello(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetP4Name(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetP4Coverage(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RecordP4Testgen(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetP4Statement(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GenRuleP4Testgen(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_P4FuzzGuideServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Hello': grpc.unary_unary_rpc_method_handler(
          servicer.Hello,
          request_deserializer=p4testgen__pb2.HealthCheckRequest.FromString,
          response_serializer=p4testgen__pb2.HealthCheckResponse.SerializeToString,
      ),
      'GetP4Name': grpc.unary_unary_rpc_method_handler(
          servicer.GetP4Name,
          request_deserializer=p4testgen__pb2.P4NameRequest.FromString,
          response_serializer=p4testgen__pb2.P4NameReply.SerializeToString,
      ),
      'GetP4Coverage': grpc.unary_unary_rpc_method_handler(
          servicer.GetP4Coverage,
          request_deserializer=p4testgen__pb2.P4CoverageRequest.FromString,
          response_serializer=p4testgen__pb2.P4CoverageReply.SerializeToString,
      ),
      'RecordP4Testgen': grpc.unary_unary_rpc_method_handler(
          servicer.RecordP4Testgen,
          request_deserializer=p4testgen__pb2.P4CoverageRequest.FromString,
          response_serializer=p4testgen__pb2.P4CoverageReply.SerializeToString,
      ),
      'GetP4Statement': grpc.unary_unary_rpc_method_handler(
          servicer.GetP4Statement,
          request_deserializer=p4testgen__pb2.P4StatementRequest.FromString,
          response_serializer=p4testgen__pb2.P4StatementReply.SerializeToString,
      ),
      'GenRuleP4Testgen': grpc.unary_unary_rpc_method_handler(
          servicer.GenRuleP4Testgen,
          request_deserializer=p4testgen__pb2.P4CoverageRequest.FromString,
          response_serializer=p4testgen__pb2.P4CoverageReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'p4testgen.P4FuzzGuide', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
