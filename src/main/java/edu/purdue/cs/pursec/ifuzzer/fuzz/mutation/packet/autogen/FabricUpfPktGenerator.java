// Generated by P4_to_class.py.
//source: /home/intender/Workspace-remote/fabric-tna/fabric_v1model_upf_ir.json
package edu.purdue.cs.pursec.ifuzzer.fuzz.mutation.packet.autogen;

import edu.purdue.cs.pursec.ifuzzer.fuzz.mutation.packet.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.*;

import p4testgen.P4Testgen;

public class FabricUpfPktGenerator extends AutogenP4PktGenerator {
    enum ParserError {
        NoError,
        PacketTooShort,
        NoMatch,
        StackOutOfBounds,
        HeaderTooShort,
        ParserTimeout,
        ParserInvalidArgument,
    }

    private static Logger log = LoggerFactory.getLogger(FabricUpfPktGenerator.class);
    private final Random rand = new Random();
    public List<String> stateList;
    Iterator<String> parserStateItr;
    private int pos;
    Map<BitVariable, Integer> lookaheadMap;

    BitVariable __v1model_version = new BitVariable(32, 20180101);

    class standard_metadata_t extends P4TypeStruct {
        BitVariable ingress_port = new BitVariable(9);
        BitVariable egress_spec = new BitVariable(9);
        BitVariable egress_port = new BitVariable(9);
        BitVariable instance_type = new BitVariable(32);
        BitVariable packet_length = new BitVariable(32);
        BitVariable enq_timestamp = new BitVariable(32);
        BitVariable enq_qdepth = new BitVariable(19);
        BitVariable deq_timedelta = new BitVariable(32);
        BitVariable deq_qdepth = new BitVariable(19);
        BitVariable ingress_global_timestamp = new BitVariable(48);
        BitVariable egress_global_timestamp = new BitVariable(48);
        BitVariable mcast_grp = new BitVariable(16);
        BitVariable egress_rid = new BitVariable(16);
        BitVariable checksum_error = new BitVariable(1);
        ParserError parser_error;
        BitVariable priority = new BitVariable(3);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            ingress_port.decode(bitStream);
            egress_spec.decode(bitStream);
            egress_port.decode(bitStream);
            instance_type.decode(bitStream);
            packet_length.decode(bitStream);
            enq_timestamp.decode(bitStream);
            enq_qdepth.decode(bitStream);
            deq_timedelta.decode(bitStream);
            deq_qdepth.decode(bitStream);
            ingress_global_timestamp.decode(bitStream);
            egress_global_timestamp.decode(bitStream);
            mcast_grp.decode(bitStream);
            egress_rid.decode(bitStream);
            checksum_error.decode(bitStream);
//            parser_error.decode(bitStream);
            priority.decode(bitStream);
        }
    }

    BitVariable PortId_t;

    BitVariable MulticastGroupId_t;

    BitVariable QueueId_t;

    BitVariable MirrorId_t;

    BitVariable fwd_type_t;

    BitVariable next_id_t;

    BitVariable mpls_label_t;

    BitVariable mac_addr_t;

    BitVariable vlan_id_t;

    BitVariable ipv4_addr_t;

    BitVariable l4_port_t;

    BitVariable flow_hash_t;

    BitVariable slice_id_t;

    BitVariable tc_t;

    BitVariable slice_tc_t;

    BitVariable FabricPortId_t;

    BitVariable teid_t;

    BitVariable upf_ctr_idx_t;

    BitVariable tun_peer_id_t;

    BitVariable session_meter_idx_t;

    BitVariable app_meter_idx_t;

    BitVariable IntReportType_t;

    class packet_in_header_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable ingress_port = new BitVariable(9);
        BitVariable _pad0 = new BitVariable(7);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                ingress_port.decode(bitStream);
                _pad0.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 16;
        }
    }

    class packet_out_header_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable pad0 = new BitVariable(7);
        BitVariable egress_port = new BitVariable(9);
        BitVariable pad1 = new BitVariable(3);
        BitVariable queue_id = new BitVariable(5);
        BitVariable pad2 = new BitVariable(5);
        BitVariable cpu_loopback_mode = new BitVariable(2);
        BitVariable do_forwarding = new BitVariable(1);
        BitVariable pad3 = new BitVariable(16);
        BitVariable pad4 = new BitVariable(48);
        BitVariable ether_type = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                pad0.decode(bitStream);
                egress_port.decode(bitStream);
                pad1.decode(bitStream);
                queue_id.decode(bitStream);
                pad2.decode(bitStream);
                cpu_loopback_mode.decode(bitStream);
                do_forwarding.decode(bitStream);
                pad3.decode(bitStream);
                pad4.decode(bitStream);
                ether_type.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 112;
        }
    }

    class ethernet_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable dst_addr = new BitVariable(48);
        BitVariable src_addr = new BitVariable(48);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                dst_addr.decode(bitStream);
                src_addr.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 96;
        }
    }

    class eth_type_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable value = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                value.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 16;
        }
    }

    class vlan_tag_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable eth_type = new BitVariable(16);
        BitVariable pri = new BitVariable(3);
        BitVariable cfi = new BitVariable(1);
        BitVariable vlan_id = new BitVariable(12);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                eth_type.decode(bitStream);
                pri.decode(bitStream);
                cfi.decode(bitStream);
                vlan_id.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 32;
        }
    }

    class mpls_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable label = new BitVariable(20);
        BitVariable tc = new BitVariable(3);
        BitVariable bos = new BitVariable(1);
        BitVariable ttl = new BitVariable(8);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                label.decode(bitStream);
                tc.decode(bitStream);
                bos.decode(bitStream);
                ttl.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 32;
        }
    }

    class pppoe_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable version = new BitVariable(4);
        BitVariable type_id = new BitVariable(4);
        BitVariable code = new BitVariable(8);
        BitVariable session_id = new BitVariable(16);
        BitVariable length = new BitVariable(16);
        BitVariable protocol = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                version.decode(bitStream);
                type_id.decode(bitStream);
                code.decode(bitStream);
                session_id.decode(bitStream);
                length.decode(bitStream);
                protocol.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 64;
        }
    }

    class ipv4_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable version = new BitVariable(4);
        BitVariable ihl = new BitVariable(4);
        BitVariable dscp = new BitVariable(6);
        BitVariable ecn = new BitVariable(2);
        BitVariable total_len = new BitVariable(16);
        BitVariable identification = new BitVariable(16);
        BitVariable flags = new BitVariable(3);
        BitVariable frag_offset = new BitVariable(13);
        BitVariable ttl = new BitVariable(8);
        BitVariable protocol = new BitVariable(8);
        BitVariable hdr_checksum = new BitVariable(16);
        BitVariable src_addr = new BitVariable(32);
        BitVariable dst_addr = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                version.decode(bitStream);
                ihl.decode(bitStream);
                dscp.decode(bitStream);
                ecn.decode(bitStream);
                total_len.decode(bitStream);
                identification.decode(bitStream);
                flags.decode(bitStream);
                frag_offset.decode(bitStream);
                ttl.decode(bitStream);
                protocol.decode(bitStream);
                hdr_checksum.decode(bitStream);
                src_addr.decode(bitStream);
                dst_addr.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 160;
        }
    }

    class ipv6_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable version = new BitVariable(4);
        BitVariable traffic_class = new BitVariable(8);
        BitVariable flow_label = new BitVariable(20);
        BitVariable payload_len = new BitVariable(16);
        BitVariable next_hdr = new BitVariable(8);
        BitVariable hop_limit = new BitVariable(8);
        BitVariable src_addr = new BitVariable(128);
        BitVariable dst_addr = new BitVariable(128);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                version.decode(bitStream);
                traffic_class.decode(bitStream);
                flow_label.decode(bitStream);
                payload_len.decode(bitStream);
                next_hdr.decode(bitStream);
                hop_limit.decode(bitStream);
                src_addr.decode(bitStream);
                dst_addr.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 320;
        }
    }

    class tcp_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable sport = new BitVariable(16);
        BitVariable dport = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                sport.decode(bitStream);
                dport.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 32;
        }
    }

    class udp_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable sport = new BitVariable(16);
        BitVariable dport = new BitVariable(16);
        BitVariable len = new BitVariable(16);
        BitVariable checksum = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                sport.decode(bitStream);
                dport.decode(bitStream);
                len.decode(bitStream);
                checksum.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 64;
        }
    }

    class icmp_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable icmp_type = new BitVariable(8);
        BitVariable icmp_code = new BitVariable(8);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                icmp_type.decode(bitStream);
                icmp_code.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 16;
        }
    }

    class vxlan_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable flags = new BitVariable(8);
        BitVariable reserved = new BitVariable(24);
        BitVariable vni = new BitVariable(24);
        BitVariable reserved_2 = new BitVariable(8);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                flags.decode(bitStream);
                reserved.decode(bitStream);
                vni.decode(bitStream);
                reserved_2.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 64;
        }
    }

    class gtpu_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable version = new BitVariable(3);
        BitVariable pt = new BitVariable(1);
        BitVariable spare = new BitVariable(1);
        BitVariable ex_flag = new BitVariable(1);
        BitVariable seq_flag = new BitVariable(1);
        BitVariable npdu_flag = new BitVariable(1);
        BitVariable msgtype = new BitVariable(8);
        BitVariable msglen = new BitVariable(16);
        BitVariable teid = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                version.decode(bitStream);
                pt.decode(bitStream);
                spare.decode(bitStream);
                ex_flag.decode(bitStream);
                seq_flag.decode(bitStream);
                npdu_flag.decode(bitStream);
                msgtype.decode(bitStream);
                msglen.decode(bitStream);
                teid.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 64;
        }
    }

    class gtpu_options_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable seq_num = new BitVariable(16);
        BitVariable n_pdu_num = new BitVariable(8);
        BitVariable next_ext = new BitVariable(8);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                seq_num.decode(bitStream);
                n_pdu_num.decode(bitStream);
                next_ext.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 32;
        }
    }

    class gtpu_ext_psc_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable len = new BitVariable(8);
        BitVariable type = new BitVariable(4);
        BitVariable spare0 = new BitVariable(4);
        BitVariable ppp = new BitVariable(1);
        BitVariable rqi = new BitVariable(1);
        BitVariable qfi = new BitVariable(6);
        BitVariable next_ext = new BitVariable(8);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                len.decode(bitStream);
                type.decode(bitStream);
                spare0.decode(bitStream);
                ppp.decode(bitStream);
                rqi.decode(bitStream);
                qfi.decode(bitStream);
                next_ext.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 32;
        }
    }

    class upf_bridged_metadata_t extends P4TypeStruct {
        BitVariable tun_peer_id = new BitVariable(8);
        BitVariable upf_ctr_id = new BitVariable(12);
        BitVariable qfi = new BitVariable(6);
        BitVariable needs_gtpu_encap = new BitVariable(1);
        BitVariable skip_upf = new BitVariable(1);
        BitVariable skip_egress_upf_ctr = new BitVariable(1);
        BitVariable teid = new BitVariable(32);
        BitVariable _pad = new BitVariable(4);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            tun_peer_id.decode(bitStream);
            upf_ctr_id.decode(bitStream);
            qfi.decode(bitStream);
            needs_gtpu_encap.decode(bitStream);
            skip_upf.decode(bitStream);
            skip_egress_upf_ctr.decode(bitStream);
            teid.decode(bitStream);
            _pad.decode(bitStream);
        }
    }

    class bridged_metadata_base_t extends P4TypeStruct {
        BitVariable inner_hash = new BitVariable(32);
        BitVariable mpls_label = new BitVariable(20);
        BitVariable ig_port = new BitVariable(9);
        BitVariable is_multicast = new BitVariable(1);
        BitVariable fwd_type = new BitVariable(3);
        BitVariable vlan_id = new BitVariable(12);
        BitVariable encap_presence = new BitVariable(2);
        BitVariable mpls_ttl = new BitVariable(8);
        BitVariable ig_tstamp = new BitVariable(48);
        BitVariable ip_eth_type = new BitVariable(16);
        BitVariable stats_flow_id = new BitVariable(10);
        BitVariable slice_tc = new BitVariable(6);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            inner_hash.decode(bitStream);
            mpls_label.decode(bitStream);
            ig_port.decode(bitStream);
            is_multicast.decode(bitStream);
            fwd_type.decode(bitStream);
            vlan_id.decode(bitStream);
            encap_presence.decode(bitStream);
            mpls_ttl.decode(bitStream);
            ig_tstamp.decode(bitStream);
            ip_eth_type.decode(bitStream);
            stats_flow_id.decode(bitStream);
            slice_tc.decode(bitStream);
        }
    }

    class bridged_metadata_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable _bmd_type0 = new BitVariable(8);
        BitVariable _base_inner_hash1 = new BitVariable(32);
        BitVariable _base_mpls_label2 = new BitVariable(20);
        BitVariable _base_ig_port3 = new BitVariable(9);
        BitVariable _base_is_multicast4 = new BitVariable(1);
        BitVariable _base_fwd_type5 = new BitVariable(3);
        BitVariable _base_vlan_id6 = new BitVariable(12);
        BitVariable _base_encap_presence7 = new BitVariable(2);
        BitVariable _base_mpls_ttl8 = new BitVariable(8);
        BitVariable _base_ig_tstamp9 = new BitVariable(48);
        BitVariable _base_ip_eth_type10 = new BitVariable(16);
        BitVariable _base_stats_flow_id11 = new BitVariable(10);
        BitVariable _base_slice_tc12 = new BitVariable(6);
        BitVariable _upf_tun_peer_id13 = new BitVariable(8);
        BitVariable _upf_upf_ctr_id14 = new BitVariable(12);
        BitVariable _upf_qfi15 = new BitVariable(6);
        BitVariable _upf_needs_gtpu_encap16 = new BitVariable(1);
        BitVariable _upf_skip_upf17 = new BitVariable(1);
        BitVariable _upf_skip_egress_upf_ctr18 = new BitVariable(1);
        BitVariable _upf_teid19 = new BitVariable(32);
        BitVariable _upf__pad20 = new BitVariable(4);
        BitVariable __pad021 = new BitVariable(1);
        BitVariable __pad122 = new BitVariable(7);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                _bmd_type0.decode(bitStream);
                _base_inner_hash1.decode(bitStream);
                _base_mpls_label2.decode(bitStream);
                _base_ig_port3.decode(bitStream);
                _base_is_multicast4.decode(bitStream);
                _base_fwd_type5.decode(bitStream);
                _base_vlan_id6.decode(bitStream);
                _base_encap_presence7.decode(bitStream);
                _base_mpls_ttl8.decode(bitStream);
                _base_ig_tstamp9.decode(bitStream);
                _base_ip_eth_type10.decode(bitStream);
                _base_stats_flow_id11.decode(bitStream);
                _base_slice_tc12.decode(bitStream);
                _upf_tun_peer_id13.decode(bitStream);
                _upf_upf_ctr_id14.decode(bitStream);
                _upf_qfi15.decode(bitStream);
                _upf_needs_gtpu_encap16.decode(bitStream);
                _upf_skip_upf17.decode(bitStream);
                _upf_skip_egress_upf_ctr18.decode(bitStream);
                _upf_teid19.decode(bitStream);
                _upf__pad20.decode(bitStream);
                __pad021.decode(bitStream);
                __pad122.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 248;
        }
    }

    class lookup_metadata_t extends P4TypeStruct {
        BitVariable eth_dst = new BitVariable(48);
        BitVariable eth_src = new BitVariable(48);
        BitVariable eth_type = new BitVariable(16);
        BitVariable vlan_id = new BitVariable(12);
        BitVariable is_ipv4 = new BitVariable(1);
        BitVariable ipv4_src = new BitVariable(32);
        BitVariable ipv4_dst = new BitVariable(32);
        BitVariable ip_proto = new BitVariable(8);
        BitVariable l4_sport = new BitVariable(16);
        BitVariable l4_dport = new BitVariable(16);
        BitVariable icmp_type = new BitVariable(8);
        BitVariable icmp_code = new BitVariable(8);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            eth_dst.decode(bitStream);
            eth_src.decode(bitStream);
            eth_type.decode(bitStream);
            vlan_id.decode(bitStream);
            is_ipv4.decode(bitStream);
            ipv4_src.decode(bitStream);
            ipv4_dst.decode(bitStream);
            ip_proto.decode(bitStream);
            l4_sport.decode(bitStream);
            l4_dport.decode(bitStream);
            icmp_type.decode(bitStream);
            icmp_code.decode(bitStream);
        }
    }

    class common_mirror_metadata_t extends P4TypeStruct {
        BitVariable mirror_session_id = new BitVariable(10);
        BitVariable bmd_type = new BitVariable(8);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            mirror_session_id.decode(bitStream);
            bmd_type.decode(bitStream);
        }
    }

    class fabric_ingress_metadata_t extends P4TypeStruct {
        bridged_metadata_t bridged = new bridged_metadata_t();
        BitVariable ecmp_hash = new BitVariable(32);
        lookup_metadata_t lkp = new lookup_metadata_t();
        BitVariable routing_ipv4_dst = new BitVariable(32);
        BitVariable skip_forwarding = new BitVariable(1);
        BitVariable skip_next = new BitVariable(1);
        BitVariable next_id = new BitVariable(32);
        BitVariable egress_port_set = new BitVariable(1);
        BitVariable punt_to_cpu = new BitVariable(1);
        BitVariable ipv4_checksum_err = new BitVariable(1);
        BitVariable inner_ipv4_checksum_err = new BitVariable(1);
        BitVariable slice_id = new BitVariable(4);
        BitVariable tc = new BitVariable(2);
        BitVariable tc_unknown = new BitVariable(1);
        BitVariable is_upf_hit = new BitVariable(1);
        BitVariable upf_slice_id = new BitVariable(4);
        BitVariable upf_tc = new BitVariable(2);
        BitVariable upf_meter_color = new BitVariable(2);
        BitVariable ig_port_type = new BitVariable(2);
        common_mirror_metadata_t mirror = new common_mirror_metadata_t();

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            bridged.decode(bitStream);
            ecmp_hash.decode(bitStream);
            lkp.decode(bitStream);
            routing_ipv4_dst.decode(bitStream);
            skip_forwarding.decode(bitStream);
            skip_next.decode(bitStream);
            next_id.decode(bitStream);
            egress_port_set.decode(bitStream);
            punt_to_cpu.decode(bitStream);
            ipv4_checksum_err.decode(bitStream);
            inner_ipv4_checksum_err.decode(bitStream);
            slice_id.decode(bitStream);
            tc.decode(bitStream);
            tc_unknown.decode(bitStream);
            is_upf_hit.decode(bitStream);
            upf_slice_id.decode(bitStream);
            upf_tc.decode(bitStream);
            upf_meter_color.decode(bitStream);
            ig_port_type.decode(bitStream);
            mirror.decode(bitStream);
        }
    }

    class common_egress_metadata_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable bmd_type = new BitVariable(8);
        BitVariable _pad = new BitVariable(5);
        BitVariable mirror_type = new BitVariable(3);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                bmd_type.decode(bitStream);
                _pad.decode(bitStream);
                mirror_type.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 16;
        }
    }

    class packet_in_mirror_metadata_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable bmd_type = new BitVariable(8);
        BitVariable _pad0 = new BitVariable(5);
        BitVariable mirror_type = new BitVariable(3);
        BitVariable _pad1 = new BitVariable(7);
        BitVariable ingress_port = new BitVariable(9);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                bmd_type.decode(bitStream);
                _pad0.decode(bitStream);
                mirror_type.decode(bitStream);
                _pad1.decode(bitStream);
                ingress_port.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 32;
        }
    }

    class fabric_egress_metadata_t extends P4TypeStruct {
        bridged_metadata_t bridged = new bridged_metadata_t();
        BitVariable cpu_port = new BitVariable(9);
        BitVariable inner_ipv4_checksum_err = new BitVariable(1);
        BitVariable pkt_length = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            bridged.decode(bitStream);
            cpu_port.decode(bitStream);
            inner_ipv4_checksum_err.decode(bitStream);
            pkt_length.decode(bitStream);
        }
    }

    class fake_ethernet_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable _pad0 = new BitVariable(48);
        BitVariable _pad1 = new BitVariable(48);
        BitVariable ether_type = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                _pad0.decode(bitStream);
                _pad1.decode(bitStream);
                ether_type.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 112;
        }
    }

    class ingress_headers_t extends P4TypeStruct {
        packet_out_header_t packet_out = new packet_out_header_t();
        packet_in_header_t packet_in = new packet_in_header_t();
        fake_ethernet_t fake_ethernet = new fake_ethernet_t();
        ethernet_t ethernet = new ethernet_t();
        vlan_tag_t vlan_tag = new vlan_tag_t();
        eth_type_t eth_type = new eth_type_t();
        mpls_t mpls = new mpls_t();
        ipv4_t ipv4 = new ipv4_t();
        ipv6_t ipv6 = new ipv6_t();
        tcp_t tcp = new tcp_t();
        udp_t udp = new udp_t();
        icmp_t icmp = new icmp_t();
        gtpu_t gtpu = new gtpu_t();
        gtpu_options_t gtpu_options = new gtpu_options_t();
        gtpu_ext_psc_t gtpu_ext_psc = new gtpu_ext_psc_t();
        vxlan_t vxlan = new vxlan_t();
        ethernet_t inner_ethernet = new ethernet_t();
        eth_type_t inner_eth_type = new eth_type_t();
        ipv4_t inner_ipv4 = new ipv4_t();
        tcp_t inner_tcp = new tcp_t();
        udp_t inner_udp = new udp_t();
        icmp_t inner_icmp = new icmp_t();

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            packet_out.decode(bitStream);
            packet_in.decode(bitStream);
            fake_ethernet.decode(bitStream);
            ethernet.decode(bitStream);
            vlan_tag.decode(bitStream);
            eth_type.decode(bitStream);
            mpls.decode(bitStream);
            ipv4.decode(bitStream);
            ipv6.decode(bitStream);
            tcp.decode(bitStream);
            udp.decode(bitStream);
            icmp.decode(bitStream);
            gtpu.decode(bitStream);
            gtpu_options.decode(bitStream);
            gtpu_ext_psc.decode(bitStream);
            vxlan.decode(bitStream);
            inner_ethernet.decode(bitStream);
            inner_eth_type.decode(bitStream);
            inner_ipv4.decode(bitStream);
            inner_tcp.decode(bitStream);
            inner_udp.decode(bitStream);
            inner_icmp.decode(bitStream);
        }
    }

    class egress_headers_t extends P4TypeStruct {
        packet_in_header_t packet_in = new packet_in_header_t();
        fake_ethernet_t fake_ethernet = new fake_ethernet_t();
        ethernet_t ethernet = new ethernet_t();
        vlan_tag_t vlan_tag = new vlan_tag_t();
        eth_type_t eth_type = new eth_type_t();
        mpls_t mpls = new mpls_t();
        ipv4_t outer_ipv4 = new ipv4_t();
        udp_t outer_udp = new udp_t();
        gtpu_t outer_gtpu = new gtpu_t();
        gtpu_options_t outer_gtpu_options = new gtpu_options_t();
        gtpu_ext_psc_t outer_gtpu_ext_psc = new gtpu_ext_psc_t();
        ipv4_t ipv4 = new ipv4_t();
        ipv6_t ipv6 = new ipv6_t();
        udp_t udp = new udp_t();

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            packet_in.decode(bitStream);
            fake_ethernet.decode(bitStream);
            ethernet.decode(bitStream);
            vlan_tag.decode(bitStream);
            eth_type.decode(bitStream);
            mpls.decode(bitStream);
            outer_ipv4.decode(bitStream);
            outer_udp.decode(bitStream);
            outer_gtpu.decode(bitStream);
            outer_gtpu_options.decode(bitStream);
            outer_gtpu_ext_psc.decode(bitStream);
            ipv4.decode(bitStream);
            ipv6.decode(bitStream);
            udp.decode(bitStream);
        }
    }

    class fabric_v1model_metadata_t extends P4TypeStruct {
        BitVariable _skip_egress0 = new BitVariable(1);
        BitVariable _do_upf_uplink_recirc1 = new BitVariable(1);
        BitVariable _drop_ctl2 = new BitVariable(1);
        BitVariable _int_mirror_type3 = new BitVariable(3);
        bridged_metadata_t _ingress_bridged4 = new bridged_metadata_t();
        BitVariable _ingress_ecmp_hash5 = new BitVariable(32);
        BitVariable _ingress_lkp_eth_dst6 = new BitVariable(48);
        BitVariable _ingress_lkp_eth_src7 = new BitVariable(48);
        BitVariable _ingress_lkp_eth_type8 = new BitVariable(16);
        BitVariable _ingress_lkp_vlan_id9 = new BitVariable(12);
        BitVariable _ingress_lkp_is_ipv410 = new BitVariable(1);
        BitVariable _ingress_lkp_ipv4_src11 = new BitVariable(32);
        BitVariable _ingress_lkp_ipv4_dst12 = new BitVariable(32);
        BitVariable _ingress_lkp_ip_proto13 = new BitVariable(8);
        BitVariable _ingress_lkp_l4_sport14 = new BitVariable(16);
        BitVariable _ingress_lkp_l4_dport15 = new BitVariable(16);
        BitVariable _ingress_lkp_icmp_type16 = new BitVariable(8);
        BitVariable _ingress_lkp_icmp_code17 = new BitVariable(8);
        BitVariable _ingress_routing_ipv4_dst18 = new BitVariable(32);
        BitVariable _ingress_skip_forwarding19 = new BitVariable(1);
        BitVariable _ingress_skip_next20 = new BitVariable(1);
        BitVariable _ingress_next_id21 = new BitVariable(32);
        BitVariable _ingress_egress_port_set22 = new BitVariable(1);
        BitVariable _ingress_punt_to_cpu23 = new BitVariable(1);
        BitVariable _ingress_ipv4_checksum_err24 = new BitVariable(1);
        BitVariable _ingress_inner_ipv4_checksum_err25 = new BitVariable(1);
        BitVariable _ingress_slice_id26 = new BitVariable(4);
        BitVariable _ingress_tc27 = new BitVariable(2);
        BitVariable _ingress_tc_unknown28 = new BitVariable(1);
        BitVariable _ingress_is_upf_hit29 = new BitVariable(1);
        BitVariable _ingress_upf_slice_id30 = new BitVariable(4);
        BitVariable _ingress_upf_tc31 = new BitVariable(2);
        BitVariable _ingress_upf_meter_color32 = new BitVariable(2);
        BitVariable _ingress_ig_port_type33 = new BitVariable(2);
        BitVariable _ingress_mirror_mirror_session_id34 = new BitVariable(10);
        BitVariable _ingress_mirror_bmd_type35 = new BitVariable(8);
        bridged_metadata_t _egress_bridged36 = new bridged_metadata_t();
        BitVariable _egress_cpu_port37 = new BitVariable(9);
        BitVariable _egress_inner_ipv4_checksum_err38 = new BitVariable(1);
        BitVariable _egress_pkt_length39 = new BitVariable(16);
        BitVariable _recirc_preserved_report_type40 = new BitVariable(3);
        BitVariable _recirc_preserved_egress_port41 = new BitVariable(9);
        BitVariable _recirc_preserved_drop_reason42 = new BitVariable(8);
        BitVariable _recirc_preserved_ingress_port43 = new BitVariable(9);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            _skip_egress0.decode(bitStream);
            _do_upf_uplink_recirc1.decode(bitStream);
            _drop_ctl2.decode(bitStream);
            _int_mirror_type3.decode(bitStream);
            _ingress_bridged4.decode(bitStream);
            _ingress_ecmp_hash5.decode(bitStream);
            _ingress_lkp_eth_dst6.decode(bitStream);
            _ingress_lkp_eth_src7.decode(bitStream);
            _ingress_lkp_eth_type8.decode(bitStream);
            _ingress_lkp_vlan_id9.decode(bitStream);
            _ingress_lkp_is_ipv410.decode(bitStream);
            _ingress_lkp_ipv4_src11.decode(bitStream);
            _ingress_lkp_ipv4_dst12.decode(bitStream);
            _ingress_lkp_ip_proto13.decode(bitStream);
            _ingress_lkp_l4_sport14.decode(bitStream);
            _ingress_lkp_l4_dport15.decode(bitStream);
            _ingress_lkp_icmp_type16.decode(bitStream);
            _ingress_lkp_icmp_code17.decode(bitStream);
            _ingress_routing_ipv4_dst18.decode(bitStream);
            _ingress_skip_forwarding19.decode(bitStream);
            _ingress_skip_next20.decode(bitStream);
            _ingress_next_id21.decode(bitStream);
            _ingress_egress_port_set22.decode(bitStream);
            _ingress_punt_to_cpu23.decode(bitStream);
            _ingress_ipv4_checksum_err24.decode(bitStream);
            _ingress_inner_ipv4_checksum_err25.decode(bitStream);
            _ingress_slice_id26.decode(bitStream);
            _ingress_tc27.decode(bitStream);
            _ingress_tc_unknown28.decode(bitStream);
            _ingress_is_upf_hit29.decode(bitStream);
            _ingress_upf_slice_id30.decode(bitStream);
            _ingress_upf_tc31.decode(bitStream);
            _ingress_upf_meter_color32.decode(bitStream);
            _ingress_ig_port_type33.decode(bitStream);
            _ingress_mirror_mirror_session_id34.decode(bitStream);
            _ingress_mirror_bmd_type35.decode(bitStream);
            _egress_bridged36.decode(bitStream);
            _egress_cpu_port37.decode(bitStream);
            _egress_inner_ipv4_checksum_err38.decode(bitStream);
            _egress_pkt_length39.decode(bitStream);
            _recirc_preserved_report_type40.decode(bitStream);
            _recirc_preserved_egress_port41.decode(bitStream);
            _recirc_preserved_drop_reason42.decode(bitStream);
            _recirc_preserved_ingress_port43.decode(bitStream);
        }
    }

    class v1model_header_t extends P4TypeStruct {
        packet_out_header_t _ingress_packet_out0 = new packet_out_header_t();
        packet_in_header_t _ingress_packet_in1 = new packet_in_header_t();
        fake_ethernet_t _ingress_fake_ethernet2 = new fake_ethernet_t();
        ethernet_t _ingress_ethernet3 = new ethernet_t();
        vlan_tag_t _ingress_vlan_tag4 = new vlan_tag_t();
        eth_type_t _ingress_eth_type5 = new eth_type_t();
        mpls_t _ingress_mpls6 = new mpls_t();
        ipv4_t _ingress_ipv47 = new ipv4_t();
        ipv6_t _ingress_ipv68 = new ipv6_t();
        tcp_t _ingress_tcp9 = new tcp_t();
        udp_t _ingress_udp10 = new udp_t();
        icmp_t _ingress_icmp11 = new icmp_t();
        gtpu_t _ingress_gtpu12 = new gtpu_t();
        gtpu_options_t _ingress_gtpu_options13 = new gtpu_options_t();
        gtpu_ext_psc_t _ingress_gtpu_ext_psc14 = new gtpu_ext_psc_t();
        vxlan_t _ingress_vxlan15 = new vxlan_t();
        ethernet_t _ingress_inner_ethernet16 = new ethernet_t();
        eth_type_t _ingress_inner_eth_type17 = new eth_type_t();
        ipv4_t _ingress_inner_ipv418 = new ipv4_t();
        tcp_t _ingress_inner_tcp19 = new tcp_t();
        udp_t _ingress_inner_udp20 = new udp_t();
        icmp_t _ingress_inner_icmp21 = new icmp_t();
        packet_in_header_t _egress_packet_in22 = new packet_in_header_t();
        fake_ethernet_t _egress_fake_ethernet23 = new fake_ethernet_t();
        ethernet_t _egress_ethernet24 = new ethernet_t();
        vlan_tag_t _egress_vlan_tag25 = new vlan_tag_t();
        eth_type_t _egress_eth_type26 = new eth_type_t();
        mpls_t _egress_mpls27 = new mpls_t();
        ipv4_t _egress_outer_ipv428 = new ipv4_t();
        udp_t _egress_outer_udp29 = new udp_t();
        gtpu_t _egress_outer_gtpu30 = new gtpu_t();
        gtpu_options_t _egress_outer_gtpu_options31 = new gtpu_options_t();
        gtpu_ext_psc_t _egress_outer_gtpu_ext_psc32 = new gtpu_ext_psc_t();
        ipv4_t _egress_ipv433 = new ipv4_t();
        ipv6_t _egress_ipv634 = new ipv6_t();
        udp_t _egress_udp35 = new udp_t();

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            _ingress_packet_out0.decode(bitStream);
            _ingress_packet_in1.decode(bitStream);
            _ingress_fake_ethernet2.decode(bitStream);
            _ingress_ethernet3.decode(bitStream);
            _ingress_vlan_tag4.decode(bitStream);
            _ingress_eth_type5.decode(bitStream);
            _ingress_mpls6.decode(bitStream);
            _ingress_ipv47.decode(bitStream);
            _ingress_ipv68.decode(bitStream);
            _ingress_tcp9.decode(bitStream);
            _ingress_udp10.decode(bitStream);
            _ingress_icmp11.decode(bitStream);
            _ingress_gtpu12.decode(bitStream);
            _ingress_gtpu_options13.decode(bitStream);
            _ingress_gtpu_ext_psc14.decode(bitStream);
            _ingress_vxlan15.decode(bitStream);
            _ingress_inner_ethernet16.decode(bitStream);
            _ingress_inner_eth_type17.decode(bitStream);
            _ingress_inner_ipv418.decode(bitStream);
            _ingress_inner_tcp19.decode(bitStream);
            _ingress_inner_udp20.decode(bitStream);
            _ingress_inner_icmp21.decode(bitStream);
            _egress_packet_in22.decode(bitStream);
            _egress_fake_ethernet23.decode(bitStream);
            _egress_ethernet24.decode(bitStream);
            _egress_vlan_tag25.decode(bitStream);
            _egress_eth_type26.decode(bitStream);
            _egress_mpls27.decode(bitStream);
            _egress_outer_ipv428.decode(bitStream);
            _egress_outer_udp29.decode(bitStream);
            _egress_outer_gtpu30.decode(bitStream);
            _egress_outer_gtpu_options31.decode(bitStream);
            _egress_outer_gtpu_ext_psc32.decode(bitStream);
            _egress_ipv433.decode(bitStream);
            _egress_ipv634.decode(bitStream);
            _egress_udp35.decode(bitStream);
        }
    }

    v1model_header_t hdr;
    fabric_v1model_metadata_t fabric_md;
    standard_metadata_t standard_md;

    fake_ethernet_t tmp;
    packet_out_header_t tmp_0;
    fake_ethernet_t tmp_1;
    gtpu_t gtpu_0;
    BitVariable gtpu_ext_len_0;
    BitVariable tmp_3;
    BitVariable tmp_5;
    BitVariable tmp_7;
    BitVariable tmp_8;
    BitVariable tmp_9;
    BitVariable tmp_10;
    BitVariable tmp_11;

    private void start() {
        log.debug("START");
        stateList.add("START");
        fabric_md._egress_pkt_length39 = (BitVariable) standard_md.packet_length;
        fabric_md._ingress_bridged4.isValid = true;
        fabric_md._ingress_bridged4._bmd_type0.putValue(1);
        fabric_md._ingress_bridged4._base_ig_port3 = standard_md.ingress_port;
        fabric_md._recirc_preserved_ingress_port43 = standard_md.ingress_port;
        fabric_md._ingress_bridged4._base_ig_tstamp9 = standard_md.ingress_global_timestamp;
        fabric_md._ingress_egress_port_set22.putValue(0);
        fabric_md._ingress_punt_to_cpu23.putValue(0);
        fabric_md._ingress_bridged4._base_ip_eth_type10.putValue(0);
        fabric_md._ingress_bridged4._base_encap_presence7.putValue(0);
        fabric_md._ingress_upf_meter_color32.putValue(0);
        tmp_8 = new BitVariable(112);
        lookaheadMap.put(tmp_8, pos);

        tmp = new fake_ethernet_t();
        tmp.isValid = true;
        tmp._pad0 = tmp_8.slice(111, 64);
        tmp._pad1 = tmp_8.slice(63, 16);
        tmp.ether_type = tmp_8.slice(15, 0);
        List<String> internalStates = List.of(
                "parse_fake_ethernet",
                "parse_fake_ethernet_and_accept",
                "check_packet_out",
                "parse_ethernet");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(4);
        }
        if (caseNum == 0) {
            tmp_8.slice(15, 0).putValue(48898);
            parse_fake_ethernet();
        } else if (caseNum == 1) {
            tmp_8.slice(15, 0).putValue(48899);
            parse_fake_ethernet_and_accept();
        } else if (caseNum == 2) {
            tmp_8.slice(15, 0).putValue(48897);
            check_packet_out();
        } else {
            parse_ethernet();
        }
    }


    private void check_packet_out() {
        log.debug("CHECK_PACKET_OUT");
        stateList.add("CHECK_PACKET_OUT");
        tmp_9 = new BitVariable(112);
        lookaheadMap.put(tmp_9, pos);

        tmp_0 = new packet_out_header_t();
        tmp_0.isValid = true;
        tmp_0.pad0 = tmp_9.slice(111, 105);
        tmp_0.egress_port = tmp_9.slice(104, 96);
        tmp_0.pad1 = tmp_9.slice(95, 93);
        tmp_0.queue_id = tmp_9.slice(92, 88);
        tmp_0.pad2 = tmp_9.slice(87, 83);
        tmp_0.cpu_loopback_mode = tmp_9.slice(82, 81);
        tmp_0.do_forwarding = tmp_9.slice(80, 80);
        tmp_0.pad3 = tmp_9.slice(79, 64);
        tmp_0.pad4 = tmp_9.slice(63, 16);
        tmp_0.ether_type = tmp_9.slice(15, 0);
        List<String> internalStates = List.of(
                "parse_packet_out_and_accept",
                "strip_packet_out");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(2);
        }
        if (caseNum == 0) {
            tmp_9.slice(80, 80).putValue(0);
            parse_packet_out_and_accept();
        } else {
            tmp_9.slice(80, 80).putValue(1);
            strip_packet_out();
        }
    }


    private void parse_packet_out_and_accept() {
        log.debug("PARSE_PACKET_OUT_AND_ACCEPT");
        stateList.add("PARSE_PACKET_OUT_AND_ACCEPT");
        //Extract hdr._ingress_packet_out0
        pos += hdr._ingress_packet_out0.getBitLength();
        hdr._ingress_packet_out0.isValid = true;
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        accept();
    }


    private void strip_packet_out() {
        log.debug("STRIP_PACKET_OUT");
        stateList.add("STRIP_PACKET_OUT");
        //advance: packet.advance
        pos += 112;
        hdr._ingress_packet_out0.isValid = true;
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        parse_ethernet();
    }


    private void parse_fake_ethernet() {
        log.debug("PARSE_FAKE_ETHERNET");
        stateList.add("PARSE_FAKE_ETHERNET");
        //Extract hdr._ingress_fake_ethernet2
        pos += hdr._ingress_fake_ethernet2.getBitLength();
        hdr._ingress_fake_ethernet2.isValid = true;
        tmp_10 = new BitVariable(112);
        lookaheadMap.put(tmp_10, pos);

        tmp_1 = new fake_ethernet_t();
        tmp_1.isValid = true;
        tmp_1._pad0 = tmp_10.slice(111, 64);
        tmp_1._pad1 = tmp_10.slice(63, 16);
        tmp_1.ether_type = tmp_10.slice(15, 0);
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        {
            parse_ethernet();
        }
    }


    private void parse_fake_ethernet_and_accept() {
        log.debug("PARSE_FAKE_ETHERNET_AND_ACCEPT");
        stateList.add("PARSE_FAKE_ETHERNET_AND_ACCEPT");
        //Extract hdr._ingress_fake_ethernet2
        pos += hdr._ingress_fake_ethernet2.getBitLength();
        hdr._ingress_fake_ethernet2.isValid = true;
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        accept();
    }


    private void parse_ethernet() {
        log.debug("PARSE_ETHERNET");
        stateList.add("PARSE_ETHERNET");
        //Extract hdr._ingress_ethernet3
        pos += hdr._ingress_ethernet3.getBitLength();
        hdr._ingress_ethernet3.isValid = true;
        tmp_3 = new BitVariable(16);
        lookaheadMap.put(tmp_3, pos);

        List<String> internalStates = List.of(
                "parse_vlan_tag",
                "parse_vlan_tag",
                "parse_untagged");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
            if (caseNum == 0)
                caseNum += rand.nextInt(2);
        } else {
            caseNum = rand.nextInt(3);
        }
        if (caseNum == 0) {
            tmp_3.putValue(34984);
            parse_vlan_tag();
        } else if (caseNum == 1) {
            tmp_3.putValue(33024, 61439);
            parse_vlan_tag();
        } else {
            parse_untagged();
        }
    }


    private void parse_vlan_tag() {
        log.debug("PARSE_VLAN_TAG");
        stateList.add("PARSE_VLAN_TAG");
        //Extract hdr._ingress_vlan_tag4
        pos += hdr._ingress_vlan_tag4.getBitLength();
        hdr._ingress_vlan_tag4.isValid = true;
        fabric_md._ingress_bridged4._base_vlan_id6 = hdr._ingress_vlan_tag4.vlan_id;
        tmp_5 = new BitVariable(16);
        lookaheadMap.put(tmp_5, pos);

        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        {
            parse_eth_type();
        }
    }


    private void parse_untagged() {
        log.debug("PARSE_UNTAGGED");
        stateList.add("PARSE_UNTAGGED");
        fabric_md._ingress_bridged4._base_vlan_id6.putValue(4094);
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        parse_eth_type();
    }


    private void parse_eth_type() {
        log.debug("PARSE_ETH_TYPE");
        stateList.add("PARSE_ETH_TYPE");
        //Extract hdr._ingress_eth_type5
        pos += hdr._ingress_eth_type5.getBitLength();
        hdr._ingress_eth_type5.isValid = true;
        List<String> internalStates = List.of(
                "parse_mpls",
                "parse_non_mpls",
                "parse_non_mpls",
                "accept");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
            if (caseNum == 1)
                caseNum += rand.nextInt(2);
        } else {
            caseNum = rand.nextInt(4);
        }
        hdr._ingress_eth_type5.value.putRandom();
        if (caseNum == 0) {
            hdr._ingress_eth_type5.value.putValue(34887);
            parse_mpls();
        } else if (caseNum == 1) {
            hdr._ingress_eth_type5.value.putValue(2048);
            parse_non_mpls();
        } else if (caseNum == 2) {
            hdr._ingress_eth_type5.value.putValue(34525);
            parse_non_mpls();
        } else {
            accept();
        }
    }


    private void parse_mpls() {
        log.debug("PARSE_MPLS");
        stateList.add("PARSE_MPLS");
        //Extract hdr._ingress_mpls6
        pos += hdr._ingress_mpls6.getBitLength();
        hdr._ingress_mpls6.isValid = true;
        fabric_md._ingress_bridged4._base_mpls_label2 = hdr._ingress_mpls6.label;
        fabric_md._ingress_bridged4._base_mpls_ttl8 = hdr._ingress_mpls6.ttl;
        tmp_7 = new BitVariable(4);
        lookaheadMap.put(tmp_7, pos);

        List<String> internalStates = List.of(
                "parse_ipv4",
                "parse_ipv6",
                "reject_packet");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(3);
        }
        tmp_7.putRandom();
        if (caseNum == 0) {
            tmp_7.putValue(4);
            parse_ipv4();
        } else if (caseNum == 1) {
            tmp_7.putValue(6);
            parse_ipv6();
        } else {
            reject_packet();
        }
    }


    private void reject_packet() {
        log.debug("REJECT_PACKET");
        stateList.add("REJECT_PACKET");
//	if(!(0)) {
//		end_assertions();
//		exit(1);
//	}

        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        accept();
    }


    private void parse_non_mpls() {
        log.debug("PARSE_NON_MPLS");
        stateList.add("PARSE_NON_MPLS");
        fabric_md._ingress_bridged4._base_mpls_label2.putValue(0);
        fabric_md._ingress_bridged4._base_mpls_ttl8.putValue(65);
        List<String> internalStates = List.of(
                "parse_ipv4",
                "parse_ipv6",
                "accept");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(3);
        }
        hdr._ingress_eth_type5.value.putRandom();
        if (caseNum == 0) {
            hdr._ingress_eth_type5.value.putValue(2048);
            parse_ipv4();
        } else if (caseNum == 1) {
            hdr._ingress_eth_type5.value.putValue(34525);
            parse_ipv6();
        } else {
            accept();
        }
    }


    private void parse_ipv4() {
        log.debug("PARSE_IPV4");
        stateList.add("PARSE_IPV4");
        //Extract hdr._ingress_ipv47
        pos += hdr._ingress_ipv47.getBitLength();
        hdr._ingress_ipv47.isValid = true;
        fabric_md._ingress_routing_ipv4_dst18 = hdr._ingress_ipv47.dst_addr;
        fabric_md._ingress_bridged4._base_ip_eth_type10.putValue(2048);
        List<String> internalStates = List.of(
                "parse_tcp",
                "parse_udp",
                "parse_icmp",
                "accept");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(4);
        }
        hdr._ingress_ipv47.protocol.putRandom();
        if (caseNum == 0) {
            hdr._ingress_ipv47.protocol.putValue(6);
            parse_tcp();
        } else if (caseNum == 1) {
            hdr._ingress_ipv47.protocol.putValue(17);
            parse_udp();
        } else if (caseNum == 2) {
            hdr._ingress_ipv47.protocol.putValue(1);
            parse_icmp();
        } else {
            accept();
        }
    }


    private void parse_ipv6() {
        log.debug("PARSE_IPV6");
        stateList.add("PARSE_IPV6");
        //Extract hdr._ingress_ipv68
        pos += hdr._ingress_ipv68.getBitLength();
        hdr._ingress_ipv68.isValid = true;
        fabric_md._ingress_bridged4._base_ip_eth_type10.putValue(34525);
        List<String> internalStates = List.of(
                "parse_tcp",
                "parse_udp",
                "parse_icmp",
                "accept");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(4);
        }
        hdr._ingress_ipv68.next_hdr.putRandom();
        if (caseNum == 0) {
            hdr._ingress_ipv68.next_hdr.putValue(6);
            parse_tcp();
        } else if (caseNum == 1) {
            hdr._ingress_ipv68.next_hdr.putValue(17);
            parse_udp();
        } else if (caseNum == 2) {
            hdr._ingress_ipv68.next_hdr.putValue(58);
            parse_icmp();
        } else {
            accept();
        }
    }


    private void parse_icmp() {
        log.debug("PARSE_ICMP");
        stateList.add("PARSE_ICMP");
        //Extract hdr._ingress_icmp11
        pos += hdr._ingress_icmp11.getBitLength();
        hdr._ingress_icmp11.isValid = true;
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        accept();
    }


    private void parse_tcp() {
        log.debug("PARSE_TCP");
        stateList.add("PARSE_TCP");
        //Extract hdr._ingress_tcp9
        pos += hdr._ingress_tcp9.getBitLength();
        hdr._ingress_tcp9.isValid = true;
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        accept();
    }


    private void parse_udp() {
        log.debug("PARSE_UDP");
        stateList.add("PARSE_UDP");
        //Extract hdr._ingress_udp10
        pos += hdr._ingress_udp10.getBitLength();
        hdr._ingress_udp10.isValid = true;
        tmp_11 = new BitVariable(64);
        lookaheadMap.put(tmp_11, pos);

        gtpu_0 = new gtpu_t();
        gtpu_0.isValid = true;
        gtpu_0.version = tmp_11.slice(63, 61);
        gtpu_0.pt = tmp_11.slice(60, 60);
        gtpu_0.spare = tmp_11.slice(59, 59);
        gtpu_0.ex_flag = tmp_11.slice(58, 58);
        gtpu_0.seq_flag = tmp_11.slice(57, 57);
        gtpu_0.npdu_flag = tmp_11.slice(56, 56);
        gtpu_0.msgtype = tmp_11.slice(55, 48);
        gtpu_0.msglen = tmp_11.slice(47, 32);
        gtpu_0.teid = tmp_11.slice(31, 0);
        List<String> internalStates = List.of(
                "parse_gtpu",
                "parse_vxlan",
                "accept");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(3);
        }
        hdr._ingress_udp10.dport.putRandom();
        if (caseNum == 0) {
            hdr._ingress_udp10.dport.putValue(2152);
            tmp_11.slice(63, 61).putValue(1);
            tmp_11.slice(55, 48).putValue(255);
            parse_gtpu();
        } else if (caseNum == 1) {
            hdr._ingress_udp10.dport.putValue(4789);
            parse_vxlan();
        } else {
            accept();
        }
    }


    private void parse_gtpu() {
        log.debug("PARSE_GTPU");
        stateList.add("PARSE_GTPU");
        //Extract hdr._ingress_gtpu12
        pos += hdr._ingress_gtpu12.getBitLength();
        hdr._ingress_gtpu12.isValid = true;
        List<String> internalStates = List.of(
                "set_gtpu_only",
                "parse_gtpu_options");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(2);
        }
        hdr._ingress_gtpu12.ex_flag.putRandom();
        hdr._ingress_gtpu12.seq_flag.putRandom();
        hdr._ingress_gtpu12.npdu_flag.putRandom();
        if (caseNum == 0) {
            hdr._ingress_gtpu12.ex_flag.putValue(0);
            hdr._ingress_gtpu12.seq_flag.putValue(0);
            hdr._ingress_gtpu12.npdu_flag.putValue(0);
            set_gtpu_only();
        } else {
            parse_gtpu_options();
        }
    }


    private void set_gtpu_only() {
        log.debug("SET_GTPU_ONLY");
        stateList.add("SET_GTPU_ONLY");
        fabric_md._ingress_bridged4._base_encap_presence7.putValue(1);
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        parse_inner_ipv4();
    }


    private void parse_gtpu_options() {
        log.debug("PARSE_GTPU_OPTIONS");
        stateList.add("PARSE_GTPU_OPTIONS");
        //Extract hdr._ingress_gtpu_options13
        pos += hdr._ingress_gtpu_options13.getBitLength();
        hdr._ingress_gtpu_options13.isValid = true;
        gtpu_ext_len_0 = new BitVariable(8);
        lookaheadMap.put(gtpu_ext_len_0, pos);

        List<String> internalStates = List.of(
                "parse_gtpu_ext_psc",
                "accept");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(2);
        }
        hdr._ingress_gtpu_options13.next_ext.putRandom();
        if (caseNum == 0) {
            hdr._ingress_gtpu_options13.next_ext.putValue(133);
            gtpu_ext_len_0.putValue(1);
            parse_gtpu_ext_psc();
        } else {
            accept();
        }
    }


    private void parse_gtpu_ext_psc() {
        log.debug("PARSE_GTPU_EXT_PSC");
        stateList.add("PARSE_GTPU_EXT_PSC");
        //Extract hdr._ingress_gtpu_ext_psc14
        pos += hdr._ingress_gtpu_ext_psc14.getBitLength();
        hdr._ingress_gtpu_ext_psc14.isValid = true;
        fabric_md._ingress_bridged4._base_encap_presence7.putValue(2);
        List<String> internalStates = List.of(
                "parse_inner_ipv4",
                "accept");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(2);
        }
        hdr._ingress_gtpu_ext_psc14.next_ext.putRandom();
        if (caseNum == 0) {
            hdr._ingress_gtpu_ext_psc14.next_ext.putValue(0);
            parse_inner_ipv4();
        } else {
            accept();
        }
    }


    private void parse_vxlan() {
        log.debug("PARSE_VXLAN");
        stateList.add("PARSE_VXLAN");
        //Extract hdr._ingress_vxlan15
        pos += hdr._ingress_vxlan15.getBitLength();
        hdr._ingress_vxlan15.isValid = true;
        fabric_md._ingress_bridged4._base_encap_presence7.putValue(3);
        //Extract hdr._ingress_inner_ethernet16
        pos += hdr._ingress_inner_ethernet16.getBitLength();
        hdr._ingress_inner_ethernet16.isValid = true;
        //Extract hdr._ingress_inner_eth_type17
        pos += hdr._ingress_inner_eth_type17.getBitLength();
        hdr._ingress_inner_eth_type17.isValid = true;
        List<String> internalStates = List.of(
                "parse_inner_ipv4",
                "accept");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(2);
        }
        hdr._ingress_inner_eth_type17.value.putRandom();
        if (caseNum == 0) {
            hdr._ingress_inner_eth_type17.value.putValue(2048);
            parse_inner_ipv4();
        } else {
            accept();
        }
    }


    private void parse_inner_ipv4() {
        log.debug("PARSE_INNER_IPV4");
        stateList.add("PARSE_INNER_IPV4");
        //Extract hdr._ingress_inner_ipv418
        pos += hdr._ingress_inner_ipv418.getBitLength();
        hdr._ingress_inner_ipv418.isValid = true;
        List<String> internalStates = List.of(
                "parse_inner_tcp",
                "parse_inner_udp",
                "parse_inner_icmp",
                "accept");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(4);
        }
        hdr._ingress_inner_ipv418.protocol.putRandom();
        if (caseNum == 0) {
            hdr._ingress_inner_ipv418.protocol.putValue(6);
            parse_inner_tcp();
        } else if (caseNum == 1) {
            hdr._ingress_inner_ipv418.protocol.putValue(17);
            parse_inner_udp();
        } else if (caseNum == 2) {
            hdr._ingress_inner_ipv418.protocol.putValue(1);
            parse_inner_icmp();
        } else {
            accept();
        }
    }


    private void parse_inner_tcp() {
        log.debug("PARSE_INNER_TCP");
        stateList.add("PARSE_INNER_TCP");
        //Extract hdr._ingress_inner_tcp19
        pos += hdr._ingress_inner_tcp19.getBitLength();
        hdr._ingress_inner_tcp19.isValid = true;
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        accept();
    }


    private void parse_inner_udp() {
        log.debug("PARSE_INNER_UDP");
        stateList.add("PARSE_INNER_UDP");
        //Extract hdr._ingress_inner_udp20
        pos += hdr._ingress_inner_udp20.getBitLength();
        hdr._ingress_inner_udp20.isValid = true;
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        accept();
    }


    private void parse_inner_icmp() {
        log.debug("PARSE_INNER_ICMP");
        stateList.add("PARSE_INNER_ICMP");
        //Extract hdr._ingress_inner_icmp21
        pos += hdr._ingress_inner_icmp21.getBitLength();
        hdr._ingress_inner_icmp21.isValid = true;
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        accept();
    }


    private void accept() {
        log.debug("ACCEPT");
        stateList.add("ACCEPT");

    }


    private void reject() {
        log.debug("REJECT");
        stateList.add("REJECT");

    }


    @Override
    public PacketVariable parser_impl(P4Testgen.TestCase testCase) throws IOException {
        stateList = new ArrayList<>();
        parserStateItr = null;
        if (testCase.getParserStatesCount() > 0) {
            List<String> parserStateList = testCase.getParserStatesList().subList(0, rand.nextInt(testCase.getParserStatesCount() + 1));
            parserStateItr = parserStateList.iterator();
        }
        hdr = new v1model_header_t();
        fabric_md = new fabric_v1model_metadata_t();
        standard_md = new standard_metadata_t();

        pos = 0;
        lookaheadMap = new HashMap<>();
        tmp_8 = null;
        tmp_9 = null;
        tmp_10 = null;
        tmp_3 = null;
        tmp_5 = null;
        tmp_7 = null;
        tmp_11 = null;
        gtpu_ext_len_0 = null;
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        start();
        BitVarOutputStream bitStream = new BitVarOutputStream();
        hdr.decode(bitStream);
        PacketVariable packetVar = bitStream.toPacketVar();
        BitVarOutputStream tmpStream;
        if (tmp_8 != null) {
            tmpStream = new BitVarOutputStream();
            tmp_8.decode(tmpStream);
            packetVar.overwrite(tmpStream.toPacketVar(lookaheadMap.get(tmp_8)));
        }
        if (tmp_9 != null) {
            tmpStream = new BitVarOutputStream();
            tmp_9.decode(tmpStream);
            packetVar.overwrite(tmpStream.toPacketVar(lookaheadMap.get(tmp_9)));
        }
        if (tmp_10 != null) {
            tmpStream = new BitVarOutputStream();
            tmp_10.decode(tmpStream);
            packetVar.overwrite(tmpStream.toPacketVar(lookaheadMap.get(tmp_10)));
        }
        if (tmp_3 != null) {
            tmpStream = new BitVarOutputStream();
            tmp_3.decode(tmpStream);
            packetVar.overwrite(tmpStream.toPacketVar(lookaheadMap.get(tmp_3)));
        }
        if (tmp_5 != null) {
            tmpStream = new BitVarOutputStream();
            tmp_5.decode(tmpStream);
            packetVar.overwrite(tmpStream.toPacketVar(lookaheadMap.get(tmp_5)));
        }
        if (tmp_7 != null) {
            tmpStream = new BitVarOutputStream();
            tmp_7.decode(tmpStream);
            packetVar.overwrite(tmpStream.toPacketVar(lookaheadMap.get(tmp_7)));
        }
        if (tmp_11 != null) {
            tmpStream = new BitVarOutputStream();
            tmp_11.decode(tmpStream);
            packetVar.overwrite(tmpStream.toPacketVar(lookaheadMap.get(tmp_11)));
        }
        if (gtpu_ext_len_0 != null) {
            tmpStream = new BitVarOutputStream();
            gtpu_ext_len_0.decode(tmpStream);
            packetVar.overwrite(tmpStream.toPacketVar(lookaheadMap.get(gtpu_ext_len_0)));
        }
        return packetVar;

    }

    class tuple_0 extends P4TypeStruct {
        BitVariable f0 = new BitVariable(4);
        BitVariable f1 = new BitVariable(4);
        BitVariable f2 = new BitVariable(6);
        BitVariable f3 = new BitVariable(2);
        BitVariable f4 = new BitVariable(16);
        BitVariable f5 = new BitVariable(16);
        BitVariable f6 = new BitVariable(3);
        BitVariable f7 = new BitVariable(13);
        BitVariable f8 = new BitVariable(8);
        BitVariable f9 = new BitVariable(8);
        BitVariable f10 = new BitVariable(32);
        BitVariable f11 = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            f0.decode(bitStream);
            f1.decode(bitStream);
            f2.decode(bitStream);
            f3.decode(bitStream);
            f4.decode(bitStream);
            f5.decode(bitStream);
            f6.decode(bitStream);
            f7.decode(bitStream);
            f8.decode(bitStream);
            f9.decode(bitStream);
            f10.decode(bitStream);
            f11.decode(bitStream);
        }
    }

    class tuple_1 extends P4TypeStruct {
        BitVariable f0 = new BitVariable(32);
        BitVariable f1 = new BitVariable(32);
        BitVariable f2 = new BitVariable(8);
        BitVariable f3 = new BitVariable(16);
        BitVariable f4 = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            f0.decode(bitStream);
            f1.decode(bitStream);
            f2.decode(bitStream);
            f3.decode(bitStream);
            f4.decode(bitStream);
        }
    }

    class tuple_2 extends P4TypeStruct {
        BitVariable f0 = new BitVariable(8);
        BitVariable f1 = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            f0.decode(bitStream);
            f1.decode(bitStream);
        }
    }

    class tuple_3 extends P4TypeStruct {
        BitVariable f0 = new BitVariable(32);
        BitVariable f1 = new BitVariable(32);
        BitVariable f2 = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            f0.decode(bitStream);
            f1.decode(bitStream);
            f2.decode(bitStream);
        }
    }

    class tuple_4 extends P4TypeStruct {
        BitVariable f0 = new BitVariable(48);
        BitVariable f1 = new BitVariable(48);
        BitVariable f2 = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            f0.decode(bitStream);
            f1.decode(bitStream);
            f2.decode(bitStream);
        }
    }

}


