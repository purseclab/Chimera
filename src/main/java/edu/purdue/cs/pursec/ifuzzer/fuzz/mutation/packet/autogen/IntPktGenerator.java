// Generated by P4_to_class.py.
//source: /home/intender/Workspace-remote/onos/pipelines/basic/src/main/resources/int-ir.json
package edu.purdue.cs.pursec.ifuzzer.fuzz.mutation.packet.autogen;

import edu.purdue.cs.pursec.ifuzzer.fuzz.mutation.packet.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.*;

import p4testgen.P4Testgen;

public class IntPktGenerator extends AutogenP4PktGenerator {
    enum ParserError {
        NoError,
        PacketTooShort,
        NoMatch,
        StackOutOfBounds,
        HeaderTooShort,
        ParserTimeout,
        ParserInvalidArgument,
    }

    private static Logger log = LoggerFactory.getLogger(IntPktGenerator.class);
    private final Random rand = new Random();
    public List<String> stateList;
    Iterator<String> parserStateItr;
    private int pos;
    Map<BitVariable, Integer> lookaheadMap;

    BitVariable __v1model_version = new BitVariable(32, 20180101);

    class standard_metadata_t extends P4TypeStruct {
        BitVariable ingress_port = new BitVariable(9);
        BitVariable egress_spec = new BitVariable(9);
        BitVariable egress_port = new BitVariable(9);
        BitVariable instance_type = new BitVariable(32);
        BitVariable packet_length = new BitVariable(32);
        BitVariable enq_timestamp = new BitVariable(32);
        BitVariable enq_qdepth = new BitVariable(19);
        BitVariable deq_timedelta = new BitVariable(32);
        BitVariable deq_qdepth = new BitVariable(19);
        BitVariable ingress_global_timestamp = new BitVariable(48);
        BitVariable egress_global_timestamp = new BitVariable(48);
        BitVariable mcast_grp = new BitVariable(16);
        BitVariable egress_rid = new BitVariable(16);
        BitVariable checksum_error = new BitVariable(1);
        ParserError parser_error;
        BitVariable priority = new BitVariable(3);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            ingress_port.decode(bitStream);
            egress_spec.decode(bitStream);
            egress_port.decode(bitStream);
            instance_type.decode(bitStream);
            packet_length.decode(bitStream);
            enq_timestamp.decode(bitStream);
            enq_qdepth.decode(bitStream);
            deq_timedelta.decode(bitStream);
            deq_qdepth.decode(bitStream);
            ingress_global_timestamp.decode(bitStream);
            egress_global_timestamp.decode(bitStream);
            mcast_grp.decode(bitStream);
            egress_rid.decode(bitStream);
            checksum_error.decode(bitStream);
//            parser_error.decode(bitStream);
            priority.decode(bitStream);
        }
    }

    BitVariable port_t;

    BitVariable next_hop_id_t;

    class packet_in_header_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable ingress_port = new BitVariable(9);
        BitVariable _padding = new BitVariable(7);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                ingress_port.decode(bitStream);
                _padding.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 16;
        }
    }

    class packet_out_header_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable egress_port = new BitVariable(9);
        BitVariable _padding = new BitVariable(7);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                egress_port.decode(bitStream);
                _padding.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 16;
        }
    }

    class ethernet_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable dst_addr = new BitVariable(48);
        BitVariable src_addr = new BitVariable(48);
        BitVariable ether_type = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                dst_addr.decode(bitStream);
                src_addr.decode(bitStream);
                ether_type.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 112;
        }
    }

    class ipv4_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable version = new BitVariable(4);
        BitVariable ihl = new BitVariable(4);
        BitVariable dscp = new BitVariable(6);
        BitVariable ecn = new BitVariable(2);
        BitVariable len = new BitVariable(16);
        BitVariable identification = new BitVariable(16);
        BitVariable flags = new BitVariable(3);
        BitVariable frag_offset = new BitVariable(13);
        BitVariable ttl = new BitVariable(8);
        BitVariable protocol = new BitVariable(8);
        BitVariable hdr_checksum = new BitVariable(16);
        BitVariable src_addr = new BitVariable(32);
        BitVariable dst_addr = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                version.decode(bitStream);
                ihl.decode(bitStream);
                dscp.decode(bitStream);
                ecn.decode(bitStream);
                len.decode(bitStream);
                identification.decode(bitStream);
                flags.decode(bitStream);
                frag_offset.decode(bitStream);
                ttl.decode(bitStream);
                protocol.decode(bitStream);
                hdr_checksum.decode(bitStream);
                src_addr.decode(bitStream);
                dst_addr.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 160;
        }
    }

    class tcp_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable src_port = new BitVariable(16);
        BitVariable dst_port = new BitVariable(16);
        BitVariable seq_no = new BitVariable(32);
        BitVariable ack_no = new BitVariable(32);
        BitVariable data_offset = new BitVariable(4);
        BitVariable res = new BitVariable(3);
        BitVariable ecn = new BitVariable(3);
        BitVariable ctrl = new BitVariable(6);
        BitVariable window = new BitVariable(16);
        BitVariable checksum = new BitVariable(16);
        BitVariable urgent_ptr = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                src_port.decode(bitStream);
                dst_port.decode(bitStream);
                seq_no.decode(bitStream);
                ack_no.decode(bitStream);
                data_offset.decode(bitStream);
                res.decode(bitStream);
                ecn.decode(bitStream);
                ctrl.decode(bitStream);
                window.decode(bitStream);
                checksum.decode(bitStream);
                urgent_ptr.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 160;
        }
    }

    class udp_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable src_port = new BitVariable(16);
        BitVariable dst_port = new BitVariable(16);
        BitVariable length_ = new BitVariable(16);
        BitVariable checksum = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                src_port.decode(bitStream);
                dst_port.decode(bitStream);
                length_.decode(bitStream);
                checksum.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 64;
        }
    }

    BitVariable switch_id_t;

    class report_fixed_header_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable ver = new BitVariable(4);
        BitVariable len = new BitVariable(4);
        BitVariable nproto = new BitVariable(3);
        BitVariable rep_md_bits = new BitVariable(6);
        BitVariable d = new BitVariable(1);
        BitVariable q = new BitVariable(1);
        BitVariable f = new BitVariable(1);
        BitVariable rsvd = new BitVariable(6);
        BitVariable hw_id = new BitVariable(6);
        BitVariable sw_id = new BitVariable(32);
        BitVariable seq_no = new BitVariable(32);
        BitVariable ingress_tstamp = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                ver.decode(bitStream);
                len.decode(bitStream);
                nproto.decode(bitStream);
                rep_md_bits.decode(bitStream);
                d.decode(bitStream);
                q.decode(bitStream);
                f.decode(bitStream);
                rsvd.decode(bitStream);
                hw_id.decode(bitStream);
                sw_id.decode(bitStream);
                seq_no.decode(bitStream);
                ingress_tstamp.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 128;
        }
    }

    class drop_report_header_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable switch_id = new BitVariable(32);
        BitVariable ingress_port_id = new BitVariable(16);
        BitVariable egress_port_id = new BitVariable(16);
        BitVariable queue_id = new BitVariable(8);
        BitVariable drop_reason = new BitVariable(8);
        BitVariable pad = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                switch_id.decode(bitStream);
                ingress_port_id.decode(bitStream);
                egress_port_id.decode(bitStream);
                queue_id.decode(bitStream);
                drop_reason.decode(bitStream);
                pad.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 96;
        }
    }

    class local_report_header_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable switch_id = new BitVariable(32);
        BitVariable ingress_port_id = new BitVariable(16);
        BitVariable egress_port_id = new BitVariable(16);
        BitVariable queue_id = new BitVariable(8);
        BitVariable queue_occupancy = new BitVariable(24);
        BitVariable egress_tstamp = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                switch_id.decode(bitStream);
                ingress_port_id.decode(bitStream);
                egress_port_id.decode(bitStream);
                queue_id.decode(bitStream);
                queue_occupancy.decode(bitStream);
                egress_tstamp.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 128;
        }
    }

    class local_report_t {
        boolean isValid = false;
        drop_report_header_t drop_report_header = new drop_report_header_t();
        local_report_header_t local_report_header = new local_report_header_t();

        void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                drop_report_header.decode(bitStream);
                local_report_header.decode(bitStream);
            }
        }
    }

    class int_header_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable ver = new BitVariable(4);
        BitVariable rep = new BitVariable(2);
        BitVariable c = new BitVariable(1);
        BitVariable e = new BitVariable(1);
        BitVariable m = new BitVariable(1);
        BitVariable rsvd1 = new BitVariable(7);
        BitVariable rsvd2 = new BitVariable(3);
        BitVariable hop_metadata_len = new BitVariable(5);
        BitVariable remaining_hop_cnt = new BitVariable(8);
        BitVariable instruction_mask_0003 = new BitVariable(4);
        BitVariable instruction_mask_0407 = new BitVariable(4);
        BitVariable instruction_mask_0811 = new BitVariable(4);
        BitVariable instruction_mask_1215 = new BitVariable(4);
        BitVariable rsvd3 = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                ver.decode(bitStream);
                rep.decode(bitStream);
                c.decode(bitStream);
                e.decode(bitStream);
                m.decode(bitStream);
                rsvd1.decode(bitStream);
                rsvd2.decode(bitStream);
                hop_metadata_len.decode(bitStream);
                remaining_hop_cnt.decode(bitStream);
                instruction_mask_0003.decode(bitStream);
                instruction_mask_0407.decode(bitStream);
                instruction_mask_0811.decode(bitStream);
                instruction_mask_1215.decode(bitStream);
                rsvd3.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 64;
        }
    }

    class int_switch_id_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable switch_id = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                switch_id.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 32;
        }
    }

    class int_level1_port_ids_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable ingress_port_id = new BitVariable(16);
        BitVariable egress_port_id = new BitVariable(16);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                ingress_port_id.decode(bitStream);
                egress_port_id.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 32;
        }
    }

    class int_hop_latency_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable hop_latency = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                hop_latency.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 32;
        }
    }

    class int_q_occupancy_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable q_id = new BitVariable(8);
        BitVariable q_occupancy = new BitVariable(24);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                q_id.decode(bitStream);
                q_occupancy.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 32;
        }
    }

    class int_ingress_tstamp_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable ingress_tstamp = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                ingress_tstamp.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 32;
        }
    }

    class int_egress_tstamp_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable egress_tstamp = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                egress_tstamp.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 32;
        }
    }

    class int_level2_port_ids_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable ingress_port_id = new BitVariable(32);
        BitVariable egress_port_id = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                ingress_port_id.decode(bitStream);
                egress_port_id.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 64;
        }
    }

    class int_egress_port_tx_util_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable egress_port_tx_util = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                egress_port_tx_util.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 32;
        }
    }

    class int_data_t extends P4TypeHeader {
        boolean isValid = false;
//        data =new();

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
//                data.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 0;
        }
    }

    class intl4_shim_t extends P4TypeHeader {
        boolean isValid = false;
        BitVariable int_type = new BitVariable(8);
        BitVariable rsvd1 = new BitVariable(8);
        BitVariable len = new BitVariable(8);
        BitVariable dscp = new BitVariable(6);
        BitVariable rsvd2 = new BitVariable(2);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            if (isValid) {
                int_type.decode(bitStream);
                rsvd1.decode(bitStream);
                len.decode(bitStream);
                dscp.decode(bitStream);
                rsvd2.decode(bitStream);
            }
        }

        @Override
        public int getBitLength() {
            return 32;
        }
    }

    class int_metadata_t extends P4TypeStruct {
        BitVariable switch_id = new BitVariable(32);
        BitVariable new_bytes = new BitVariable(16);
        BitVariable new_words = new BitVariable(8);
        BitVariable source = new BitVariable(1);
        BitVariable sink = new BitVariable(1);
        BitVariable transit = new BitVariable(1);
        BitVariable intl4_shim_len = new BitVariable(8);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            switch_id.decode(bitStream);
            new_bytes.decode(bitStream);
            new_words.decode(bitStream);
            source.decode(bitStream);
            sink.decode(bitStream);
            transit.decode(bitStream);
            intl4_shim_len.decode(bitStream);
        }
    }

    class headers_t extends P4TypeStruct {
        packet_out_header_t packet_out = new packet_out_header_t();
        packet_in_header_t packet_in = new packet_in_header_t();
        ethernet_t report_ethernet = new ethernet_t();
        ipv4_t report_ipv4 = new ipv4_t();
        udp_t report_udp = new udp_t();
        report_fixed_header_t report_fixed_header = new report_fixed_header_t();
        local_report_t report_local = new local_report_t();
        ethernet_t ethernet = new ethernet_t();
        ipv4_t ipv4 = new ipv4_t();
        tcp_t tcp = new tcp_t();
        udp_t udp = new udp_t();
        intl4_shim_t intl4_shim = new intl4_shim_t();
        int_header_t int_header = new int_header_t();
        int_data_t int_data = new int_data_t();
        int_switch_id_t int_switch_id = new int_switch_id_t();
        int_level1_port_ids_t int_level1_port_ids = new int_level1_port_ids_t();
        int_hop_latency_t int_hop_latency = new int_hop_latency_t();
        int_q_occupancy_t int_q_occupancy = new int_q_occupancy_t();
        int_ingress_tstamp_t int_ingress_tstamp = new int_ingress_tstamp_t();
        int_egress_tstamp_t int_egress_tstamp = new int_egress_tstamp_t();
        int_level2_port_ids_t int_level2_port_ids = new int_level2_port_ids_t();
        int_egress_port_tx_util_t int_egress_tx_util = new int_egress_port_tx_util_t();

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            packet_out.decode(bitStream);
            packet_in.decode(bitStream);
            report_ethernet.decode(bitStream);
            report_ipv4.decode(bitStream);
            report_udp.decode(bitStream);
            report_fixed_header.decode(bitStream);
            report_local.decode(bitStream);
            ethernet.decode(bitStream);
            ipv4.decode(bitStream);
            tcp.decode(bitStream);
            udp.decode(bitStream);
            intl4_shim.decode(bitStream);
            int_header.decode(bitStream);
            int_data.decode(bitStream);
            int_switch_id.decode(bitStream);
            int_level1_port_ids.decode(bitStream);
            int_hop_latency.decode(bitStream);
            int_q_occupancy.decode(bitStream);
            int_ingress_tstamp.decode(bitStream);
            int_egress_tstamp.decode(bitStream);
            int_level2_port_ids.decode(bitStream);
            int_egress_tx_util.decode(bitStream);
        }
    }

    class local_metadata_t extends P4TypeStruct {
        BitVariable _l4_src_port0 = new BitVariable(16);
        BitVariable _l4_dst_port1 = new BitVariable(16);
        BitVariable _next_hop_id2 = new BitVariable(16);
        BitVariable _selector3 = new BitVariable(16);
        BitVariable _int_meta_switch_id4 = new BitVariable(32);
        BitVariable _int_meta_new_bytes5 = new BitVariable(16);
        BitVariable _int_meta_new_words6 = new BitVariable(8);
        BitVariable _int_meta_source7 = new BitVariable(1);
        BitVariable _int_meta_sink8 = new BitVariable(1);
        BitVariable _int_meta_transit9 = new BitVariable(1);
        BitVariable _int_meta_intl4_shim_len10 = new BitVariable(8);
        BitVariable _compute_checksum11 = new BitVariable(1);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            _l4_src_port0.decode(bitStream);
            _l4_dst_port1.decode(bitStream);
            _next_hop_id2.decode(bitStream);
            _selector3.decode(bitStream);
            _int_meta_switch_id4.decode(bitStream);
            _int_meta_new_bytes5.decode(bitStream);
            _int_meta_new_words6.decode(bitStream);
            _int_meta_source7.decode(bitStream);
            _int_meta_sink8.decode(bitStream);
            _int_meta_transit9.decode(bitStream);
            _int_meta_intl4_shim_len10.decode(bitStream);
            _compute_checksum11.decode(bitStream);
        }
    }

    class tuple_0 extends P4TypeStruct {
        BitVariable f0 = new BitVariable(4);
        BitVariable f1 = new BitVariable(4);
        BitVariable f2 = new BitVariable(6);
        BitVariable f3 = new BitVariable(2);
        BitVariable f4 = new BitVariable(16);
        BitVariable f5 = new BitVariable(16);
        BitVariable f6 = new BitVariable(3);
        BitVariable f7 = new BitVariable(13);
        BitVariable f8 = new BitVariable(8);
        BitVariable f9 = new BitVariable(8);
        BitVariable f10 = new BitVariable(32);
        BitVariable f11 = new BitVariable(32);

        @Override
        public void decode(BitVarOutputStream bitStream) throws IOException {
            f0.decode(bitStream);
            f1.decode(bitStream);
            f2.decode(bitStream);
            f3.decode(bitStream);
            f4.decode(bitStream);
            f5.decode(bitStream);
            f6.decode(bitStream);
            f7.decode(bitStream);
            f8.decode(bitStream);
            f9.decode(bitStream);
            f10.decode(bitStream);
            f11.decode(bitStream);
        }
    }

    headers_t hdr;
    local_metadata_t local_metadata;
    standard_metadata_t standard_metadata;


    private void start() {
        log.debug("START");
        stateList.add("START");
        List<String> internalStates = List.of(
                "parse_packet_out",
                "parse_ethernet");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(2);
        }
        if (caseNum == 0) {
            standard_metadata.ingress_port.putValue(255);
            parse_packet_out();
        } else {
            parse_ethernet();
        }
    }


    private void parse_packet_out() {
        log.debug("PARSE_PACKET_OUT");
        stateList.add("PARSE_PACKET_OUT");
        //Extract hdr.packet_out
        pos += hdr.packet_out.getBitLength();
        hdr.packet_out.isValid = true;
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        parse_ethernet();
    }


    private void parse_ethernet() {
        log.debug("PARSE_ETHERNET");
        stateList.add("PARSE_ETHERNET");
        //Extract hdr.ethernet
        pos += hdr.ethernet.getBitLength();
        hdr.ethernet.isValid = true;
        List<String> internalStates = List.of(
                "parse_ipv4",
                "accept");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(2);
        }
        hdr.ethernet.ether_type.putRandom();
        if (caseNum == 0) {
            hdr.ethernet.ether_type.putValue(2048);
            parse_ipv4();
        } else {
            accept();
        }
    }


    private void parse_ipv4() {
        log.debug("PARSE_IPV4");
        stateList.add("PARSE_IPV4");
        //Extract hdr.ipv4
        pos += hdr.ipv4.getBitLength();
        hdr.ipv4.isValid = true;
        List<String> internalStates = List.of(
                "parse_tcp",
                "parse_udp",
                "accept");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(3);
        }
        hdr.ipv4.protocol.putRandom();
        if (caseNum == 0) {
            hdr.ipv4.protocol.putValue(6);
            parse_tcp();
        } else if (caseNum == 1) {
            hdr.ipv4.protocol.putValue(17);
            parse_udp();
        } else {
            accept();
        }
    }


    private void parse_tcp() {
        log.debug("PARSE_TCP");
        stateList.add("PARSE_TCP");
        //Extract hdr.tcp
        pos += hdr.tcp.getBitLength();
        hdr.tcp.isValid = true;
        local_metadata._l4_src_port0 = hdr.tcp.src_port;
        local_metadata._l4_dst_port1 = hdr.tcp.dst_port;
        List<String> internalStates = List.of(
                "parse_intl4_shim",
                "accept");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(2);
        }
        hdr.ipv4.dscp.putRandom();
        if (caseNum == 0) {
            hdr.ipv4.dscp.putValue(23);
            parse_intl4_shim();
        } else {
            accept();
        }
    }


    private void parse_udp() {
        log.debug("PARSE_UDP");
        stateList.add("PARSE_UDP");
        //Extract hdr.udp
        pos += hdr.udp.getBitLength();
        hdr.udp.isValid = true;
        local_metadata._l4_src_port0 = hdr.udp.src_port;
        local_metadata._l4_dst_port1 = hdr.udp.dst_port;
        List<String> internalStates = List.of(
                "parse_intl4_shim",
                "accept");
        int caseNum;
        if (parserStateItr != null && parserStateItr.hasNext()) {
            caseNum = internalStates.indexOf(parserStateItr.next());
        } else {
            caseNum = rand.nextInt(2);
        }
        hdr.ipv4.dscp.putRandom();
        if (caseNum == 0) {
            hdr.ipv4.dscp.putValue(23);
            parse_intl4_shim();
        } else {
            accept();
        }
    }


    private void parse_intl4_shim() {
        log.debug("PARSE_INTL4_SHIM");
        stateList.add("PARSE_INTL4_SHIM");
        //Extract hdr.intl4_shim
        pos += hdr.intl4_shim.getBitLength();
        hdr.intl4_shim.isValid = true;
        local_metadata._int_meta_intl4_shim_len10 = hdr.intl4_shim.len;
        //Extract hdr.int_header
        pos += hdr.int_header.getBitLength();
        hdr.int_header.isValid = true;
        //Extract hdr.int_data
        pos += hdr.int_data.getBitLength();
        hdr.int_data.isValid = true;
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        accept();
    }


    private void accept() {
        log.debug("ACCEPT");
        stateList.add("ACCEPT");

    }


    private void reject() {
        log.debug("REJECT");
        stateList.add("REJECT");

    }

	@Override
	public Optional<Integer> getInputPort() {
		if (standard_metadata.ingress_port.isAllocated()) {
			return Optional.of(standard_metadata.ingress_port.toInt());
		}
		return Optional.empty();
	}

    @Override
    public PacketVariable parser_impl(P4Testgen.TestCase testCase) throws IOException {
        stateList = new ArrayList<>();
        parserStateItr = null;
        if (testCase.getParserStatesCount() > 0) {
            List<String> parserStateList = testCase.getParserStatesList().subList(0, rand.nextInt(testCase.getParserStatesCount() + 1));
            parserStateItr = parserStateList.iterator();
        }
        hdr = new headers_t();
        local_metadata = new local_metadata_t();
        standard_metadata = new standard_metadata_t();

        pos = 0;
        lookaheadMap = new HashMap<>();
        if (parserStateItr != null && parserStateItr.hasNext())
            parserStateItr.next();
        start();
        BitVarOutputStream bitStream = new BitVarOutputStream();
        hdr.decode(bitStream);
        PacketVariable packetVar = bitStream.toPacketVar();
        BitVarOutputStream tmpStream;
        return packetVar;

    }

}


